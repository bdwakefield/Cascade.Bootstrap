@model Cascade.Bootstrap.Models.BootstrapThemeSettingsPart

@{
    Script.Require("jQuery");
    Script.Include("CascadeBootstrapSettings.js");
}

@using (Script.Foot())
{
    <script type="text/javascript">
        $(function () {
            $('.swatchContainer.@Model.Swatch').trigger("click");
        });
    </script>
}
<style type="text/css">
    .swatchContainer {
        padding: 5px;
        border: 2px solid #fff;
        width: 17%;
        display: inline-block;
        background-color: #eee;
    }

        .swatchContainer:hover {
            border: 2px dotted #bbb;
            cursor: pointer;
        }

        .swatchContainer.active {
            border: 2px solid black;
        }

        .swatchContainer img {
            display: block;
            max-width: 100%;
            height: auto;
        }

        .swatchContainer p {
            text-align: center;
            font-size: 120%;
        }

    #navColorContainer, #inverseColorContainer {
        width: 300px;
        height: 50px;
        text-align: center;
        line-height: 50px;
        border: 1px solid black;
    }

      
</style>
<fieldset>
    <legend>Select a Swatch</legend>
    <div style="width: 100%">

        @{
            var currentFolder = Directory.GetCurrentDirectory();
            var appPath = Request.PhysicalApplicationPath;
            var swatchPath = "/Themes/Cascade.Bootstrap/Content/Swatches";
            var folder = appPath + swatchPath;
            var swatchPattern = "*_th.png";
            var swatchFiles = Directory.EnumerateFiles(folder, swatchPattern, SearchOption.TopDirectoryOnly);
            foreach (var file in swatchFiles.OrderBy(x => x))
            {
                var start = file.IndexOf(folder) + folder.Length + 1;
                var len = file.LastIndexOf("_th.") - start;
                var swatch = file.Substring(start, len);

                var swatchImg = Request.ApplicationPath + swatchPath + "/" + swatch + "_th.png";
                if (swatchImg.StartsWith("//"))
                {
                    swatchImg = swatchImg.Substring(1);
                }
                <div class="swatchContainer @swatch" data-swatch="@swatch">
                    <img src="@swatchImg">
                    <p>@swatch</p>
                </div>
            }
        }
    </div>
</fieldset>


<a id="cbduplicate" class="button putton-primary" src="#">Duplicate Selected Swatch...</a>
<span class="hint">@T("This will make a copy of the currently selected swatch. It is then up to you to modify the less files and the swatch image, and recompile the less files.")</span>


<fieldset>
    @Html.HiddenFor(x => x.Swatch)
</fieldset>
<fieldset>
    <legend>Inverse Navigation Bar Color</legend>
    @Html.CheckBoxFor(m => m.UseInverseNav) @T("Use Inverse Navigation Bar Color?")
    <span class="hint">@T("Select this checkbox to use the inverse navigation bar color.")</span>
    <div id="navColorContainer">Navigation Sample</div>
    <div id="inverseColorContainer">Inverse Navigation Sample</div>
</fieldset>
<fieldset>
    <legend>Fixed Navigation Bar</legend>
    @Html.CheckBoxFor(m => m.UseFixedNav)@T("Use Fixed Navigation Bar?")
    <span class="hint">@T("Select this checkbox to use a fixed navigation.")</span>
</fieldset>
<fieldset>
    <legend>Navigation Bar Search Field</legend>
    @Html.CheckBoxFor(m => m.UseNavSearch)@T("Use Navigation Bar Search Field?")
    <span class="hint">@T("Select this checkbox to use a navigation bar search field. Requires the Search module.")</span>
</fieldset>
<fieldset>
    <legend>Hover Menus</legend>
    @Html.CheckBoxFor(m => m.UseHoverMenus)@T("Use Hover Menus?")
    <span class="hint">@T("Select this checkbox to use hover menu items.")</span>
</fieldset>
<fieldset>
    <legend>Show Log-In links in Menu</legend>
    @Html.CheckBoxFor(m => m.ShowLogInLinksInMenu)@T("Show Log-In links in Menu?")
    <span class="hint">@T("Show Log-In links in Menu.")</span>
</fieldset>
<fieldset>
    <legend>Show Log-In links in Menu when Logged In</legend>
    @Html.CheckBoxFor(m => m.ShowLogInLinksInMenuWhenLoggedIn)@T("Show Log-In links in Menu when Logged In?")
    <span class="hint">@T("Show Log-In links in Menu when Logged In. (Depends on Show Log-In option)")</span>
</fieldset>
<fieldset>
    <legend>Fluid Layout</legend>
    @Html.CheckBoxFor(m => m.UseFluidLayout)@T("Use a Fluid Layout?")
    <span class="hint">@T("Select this checkbox to use a fluid layout instead of a boxed layout.")</span>
</fieldset>
<fieldset>
    <legend>Sticky Footer</legend>
    @Html.CheckBoxFor(m => m.UseStickyFooter)@T("Use a Sticky Footer?")
    <span class="hint">@T("Select this checkbox to use a sticky footer.")</span>
</fieldset>

